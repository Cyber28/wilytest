name: benchmark-latex-build

on:
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        docker-tag: ["v1.0.0", "v1.1.0", "v1.1.1", "v1.2.0", "v1.2.1", "v1.3.0", "v1.3.1", "v1.4.0", "v1.5.0", "latest", "experimental"]
        build-type: ["clean", "incremental"]
        disable-diffpdf: ["", "1"]
        disable-synctex: ["", "1"]
        disable-pythontex: ["", "1"]
    steps:
      - name: pull image
        run: docker pull ghcr.io/jemand771/latex-build:${{ matrix.docker-tag }}
      - name: clone repo
        run: git clone https://github.com/DSczyrba/Vorlage-Latex
      - name: initial build
        run: docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v "$(pwd)/Vorlage-Latex/Latex:/latex" ghcr.io/jemand771/latex-build:${{ matrix.docker-tag }}
      - name: set key
        run: echo "key=${{ matrix.build-type }}-${{ matrix.docker-tag }},${{ matrix.disable-diffpdf != '' }},${{ matrix.disable-synctex != '' }},${{ matrix.disable-pythontex != '' }}" >> $GITHUB_ENV
      - name: benchmark
        run: |
          echo elapsed=$(/usr/bin/time -f %e bash -c "for i in {0..1}; do if [ "${{ matrix.build-type }}" = "clean" ]; then rm -rf Vorlage-Latex/Latex/.build; fi; docker run -u $(id -u ${USER}):$(id -g ${USER}) --rm -v \"$(pwd)/Vorlage-Latex/Latex:/latex\" -e DISABLE_DIFFPDF=${{ matrix.disable-diffpdf }} -e DISABLE_SYNCTEX=${{ matrix.disable-synctex }} -e DISABLE_PYTHONTEX=${{ matrix.disable-pythontex }} ghcr.io/jemand771/latex-build:${{ matrix.docker-tag }} &> /dev/null; done" 2>&1) >> $GITHUB_ENV
      - name: save result
        run: echo ${{ env.key }},${{ env.elapsed }} > result.csv
      - name: upload result
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.key }}
          path: result.csv
  prepare-results:
    runs-on: ubuntu-latest
    needs: benchmark
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
      - name: aggregate results
        run: find /home/runner/work/test/test -type f ! -name 'results.csv' -exec cat {} + > results.csv
      - name: upload super-results
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: results.csv
  print-table:
    runs-on: ubuntu-latest
    needs: prepare-results
    strategy:
      fail-fast: false
      matrix:
        tablefmt: ["pretty", "github"]
    steps:
      - name: set tablefmt
        run: echo "${{ matrix.tablefmt }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - run: pip install tabulate
      - uses: actions/download-artifact@v2
        with:
          name: results
      - run: cat results.csv | python latex-build-benchmark-parser.py
